import{_ as p,c as l,o as e,aE as r}from"./chunks/framework.CFiOP5Vi.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/web/node.md","filePath":"src/web/node.md","lastUpdated":1742543994000}'),s={name:"src/web/node.md"};function t(n,o,u,i,a,d){return e(),l("div",null,o[0]||(o[0]=[r('<p>Rollup 是一个 JavaScript 模块打包器，通常用于打包浏览器端的库和应用程序。然而，它也可以用于打包 Node.js 服务端应用程序。以下是使用 Rollup 打包 Node.js 服务端应用程序的基本步骤：</p><ol><li>安装 Rollup</li></ol><p>首先，你需要安装 Rollup 和相关插件。你可以使用 npm 或 yarn 来安装：</p><p>Copy npm install rollup @rollup/plugin-node-resolve @rollup/plugin-commonjs @rollup/plugin-json rollup-plugin-terser --save-dev</p><p>或者使用 yarn：</p><p>Copy yarn add rollup @rollup/plugin-node-resolve @rollup/plugin-commonjs @rollup/plugin-json rollup-plugin-terser --dev</p><ol start="2"><li>配置 Rollup</li></ol><p>创建一个 rollup.config.js 文件来配置 Rollup。以下是一个基本的配置示例，适用于 Node.js 服务端应用程序：</p><p>Copy import resolve from &#39;@rollup/plugin-node-resolve&#39;; import commonjs from &#39;@rollup/plugin-commonjs&#39;; import json from &#39;@rollup/plugin-json&#39;; import { terser } from &#39;rollup-plugin-terser&#39;;</p><p>export default { input: &#39;src/index.js&#39;, // 你的入口文件 output: { file: &#39;dist/bundle.js&#39;, // 输出文件 format: &#39;cjs&#39;, // CommonJS 格式，适用于 Node.js }, plugins: [ resolve({ preferBuiltins: true, // 告诉插件使用 Node.js 内置模块 }), commonjs(), // 将 CommonJS 模块转换为 ES6 json(), // 允许导入 JSON 文件 terser(), // 压缩输出文件（可选） ], external: [&#39;express&#39;], // 假设使用 express，将其排除在打包之外 };</p><ol start="3"><li>添加打包脚本</li></ol><p>在 package.json 文件中添加一个脚本来运行 Rollup：</p><p>Copy &quot;scripts&quot;: { &quot;build&quot;: &quot;rollup -c&quot; }</p><ol start="4"><li>打包应用程序</li></ol><p>运行以下命令来打包你的 Node.js 应用程序：</p><p>Copy npm run build</p><p>或者如果你使用 yarn：</p><p>Copy yarn build</p><p>注意事项 外部依赖：你可能不想将所有的 node_modules 打包进最终的文件中。使用 external 选项可以排除某些依赖。 内置模块：Node.js 的内置模块（如 fs、path 等）应该被标记为外部模块，不需要打包。 环境变量：如果你的应用程序依赖于环境变量，确保在打包后的环境中正确设置它们。 源映射：如果你想要源映射（source maps）以便于调试，可以在 output 选项中设置 sourcemap: true。</p><p>使用 Rollup 打包 Node.js 服务端应用程序可以减少最终部署包的大小，并可能提高运行时性能。然而，这通常不是必须的，因为服务端应用程序不像前端应用程序那样需要发送给客户端。确保评估你的项目是否真的需要这个步骤。</p>',20)]))}const j=p(s,[["render",t]]);export{c as __pageData,j as default};

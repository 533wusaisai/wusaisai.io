import{_ as i,c as a,o as n,aE as e}from"./chunks/framework.CFiOP5Vi.js";const c=JSON.parse('{"title":"React持久化存储方案","description":"","frontmatter":{},"headers":[],"relativePath":"src/web/react/storage.md","filePath":"src/web/react/storage.md","lastUpdated":1742543994000}'),l={name:"src/web/react/storage.md"};function p(t,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="react持久化存储方案" tabindex="-1">React持久化存储方案 <a class="header-anchor" href="#react持久化存储方案" aria-label="Permalink to &quot;React持久化存储方案&quot;">​</a></h1><p>在React应用程序中实现持久化存储，通常意味着将应用状态保存在客户端，以便在页面刷新或重新打开应用时保持状态不变。以下是几种常见的React持久化存储</p><h2 id="_1-使用-localstorage-或-sessionstorage" tabindex="-1">1. 使用 <code>localStorage</code> 或 <code>sessionStorage</code> <a class="header-anchor" href="#_1-使用-localstorage-或-sessionstorage" aria-label="Permalink to &quot;1. 使用 \`localStorage\` 或 \`sessionStorage\`&quot;">​</a></h2><blockquote><p>最简单的持久化方案之一。你可以直接使用<code>Web Storage API</code>来存储数据。</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 保存数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> savedData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p><code>localStorage</code> 保存的数据没有过期时间，而 <code>sessionStorage</code> 保存的数据在页面会话结束时（例如关闭页面）会被清除。</p></blockquote><h2 id="_2-使用-redux-persist" tabindex="-1">2. 使用 redux-persist <a class="header-anchor" href="#_2-使用-redux-persist" aria-label="Permalink to &quot;2. 使用 redux-persist&quot;">​</a></h2><blockquote><p>如果你的应用使用Redux进行状态管理，redux-persist是一个流行的库，可以很容易地将Redux状态持久化到localStorage或其他存储中。</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 配置redux-persist</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { persistStore, persistReducer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;redux-persist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> storage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;redux-persist/lib/storage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> persistConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  key: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  storage,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> persistedReducer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> persistReducer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(persistConfig, rootReducer);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(persistedReducer);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> persistor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> persistStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(store);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>然后在React组件中使用PersistGate：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { PersistGate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;redux-persist/integration/react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在根组件中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PersistGate</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoadingView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">persistor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{persistor}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PersistGate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_3-使用-indexeddb" tabindex="-1">3. 使用 IndexedDB <a class="header-anchor" href="#_3-使用-indexeddb" aria-label="Permalink to &quot;3. 使用 IndexedDB&quot;">​</a></h2><blockquote><p>对于更大型的数据或者需要更复杂查询的情况，你可以使用 IndexedDB。这是一个运行在浏览器中的低级API，用于客户端存储大量结构化数据。你可以使用原生API，但是由于其复杂性，通常建议使用库如 localForage、Dexie.js 或 PouchDB。</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localForage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;localforage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 保存数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localForage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localForage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 当值被读取后执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_4-使用-cookies" tabindex="-1">4. 使用 cookies <a class="header-anchor" href="#_4-使用-cookies" aria-label="Permalink to &quot;4. 使用 cookies&quot;">​</a></h2><p>Cookies可以用于存储少量数据。虽然它们通常用于服务器和客户端之间的会话保持，但也可以用于在客户端存储数据。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;username=John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取cookie</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.cookie;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_5-使用第三方服务" tabindex="-1">5. 使用第三方服务 <a class="header-anchor" href="#_5-使用第三方服务" aria-label="Permalink to &quot;5. 使用第三方服务&quot;">​</a></h2><blockquote><p>对于需要跨设备同步或者需要备份的数据，你可以使用如Firebase、AWS Amplify等第三方云服务来持久化数据。</p></blockquote><div class="info custom-block"><p class="custom-block-title">注意事项</p><ul><li>安全性：敏感数据不应该存储在客户端，或者至少应该加密存储。</li><li>大小限制：localStorage 和 sessionStorage 通常有大小限制（大约5MB）。</li><li>异步操作：IndexedDB 和第三方服务通常是异步的，需要考虑到异步操作的处理。</li><li>用户隐私：使用cookies时需要遵守相关的用户隐私法规。</li></ul></div><p>选择哪种持久化方案取决于你的具体需求，包括你需要存储的数据量、数据的敏感性、是否需要跨会话持久化以及你的应用架构。</p><p>[<a href="https://github.com/tangly1024/NotionNext/blob/main/package.json" target="_blank" rel="noreferrer">https://github.com/tangly1024/NotionNext/blob/main/package.json</a>]</p><ul><li><p>@giscus/react: 一个React组件库，用于在React应用中集成Giscus评论系统。</p></li><li><p>@headlessui/react: 一个完全无障碍的UI组件库，用于快速构建无样式的、完全可定制的UI组件。</p></li><li><p>@vercel/analytics: Vercel提供的分析工具，用于收集和分析部署在Vercel平台上的网站性能和访问数据。</p></li><li><p>algoliasearch: Algolia搜索API的客户端，用于在网站上实现快速、可定制的搜索体验。</p></li><li><p>animejs: 一个轻量级的JavaScript动画库，用于创建复杂的动画效果。</p></li><li><p>aos: AOS（Animate On Scroll）库用于在滚动时添加滚动动画。</p></li><li><p>copy-to-clipboard: 一个简单的库，用于将文本复制到剪贴板。</p></li><li><p>feed: 用于创建RSS、Atom和JSON feed的库。</p></li><li><p>memory-cache: 一个简单的内存缓存库，适用于Node.js。</p></li><li><p>notion-client: 一个用于与Notion API交互的客户端库。</p></li><li><p>preact: 一个轻量级的React替代品，具有相同的现代API和功能。</p></li><li><p>prism-themes: Prism是一个轻量级、可扩展的语法高亮器，这个库提供了额外的主题。</p></li><li><p>react-facebook: 用于集成Facebook SDK的React组件，例如用于添加Facebook登录或分享功能。</p></li><li><p>react-tweet-embed: 一个React组件，用于在应用中嵌入Twitter推文。</p></li><li><p>react-share: 一组React组件，用于添加社交分享按钮。</p></li><li><p>typed.js: 一个打字动画库，模拟打字机效果。</p></li><li><p>@waline/client: 一个简单、快速、开源的评论系统。</p></li><li><p>autoprefixer: 一个CSS后处理工具，用于自动添加浏览器前缀。</p></li><li><p>next-sitemap: 用于生成Next.js应用的sitemap.xml文件的库。</p></li></ul>`,23)]))}const E=i(l,[["render",p]]);export{c as __pageData,E as default};
